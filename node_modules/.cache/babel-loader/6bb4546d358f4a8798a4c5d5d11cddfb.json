{"ast":null,"code":"import { action, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n  constructor() {\n    this.idForNewTask = 3;\n    this.filter = \"all\";\n    this.newTaskInput = /*#__PURE__*/React.createRef();\n    this.tasks = [{\n      id: 1,\n      title: \"First Task from MobX\",\n      isComplete: false,\n      editing: false\n    }, {\n      id: 2,\n      title: \"Second Task from MobX\",\n      isComplete: false,\n      editing: false\n    }];\n\n    this.addTask = event => {\n      if (event.key === \"Enter\") {\n        const newTaskTitle = this.newTaskInput.current.value;\n        if (newTaskTitle.trim().length === 0) return;\n        let idForNewTask = this.state.idForNewTask + 1;\n        this.tasks.push({\n          id: idForNewTask,\n          title: newTaskTitle,\n          isComplete: false,\n          editing: false\n        }); // let tasks = [...this.state.tasks];\n        // let idForNewTask = this.state.idForNewTask + 1;\n        // tasks.push({\n        // \tid: idForNewTask,\n        // \ttitle: newTaskTitle,\n        // \tisComplete: false,\n        // \tediting: false,\n        // });\n        // this.setState({ tasks, idForNewTask });\n\n        this.newTaskInput.current.value = \"\";\n      }\n    };\n\n    makeObservable(this, {\n      idForNewTask: observable,\n      filter: observable,\n      tasks: observable,\n      addTask: action\n    });\n  }\n\n}\n\nconst store = new TaskStore();\nexport default store;","map":{"version":3,"sources":["/Users/barihossain/Sites/react-todo/src/stores/TaskStore.js"],"names":["action","makeObservable","observable","React","TaskStore","constructor","idForNewTask","filter","newTaskInput","createRef","tasks","id","title","isComplete","editing","addTask","event","key","newTaskTitle","current","value","trim","length","state","push","store"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,cAAjB,EAAiCC,UAAjC,QAAmD,MAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,CAAgB;AAgDfC,EAAAA,WAAW,GAAG;AAAA,SA/CdC,YA+Cc,GA/CC,CA+CD;AAAA,SA9CdC,MA8Cc,GA9CL,KA8CK;AAAA,SA7CdC,YA6Cc,gBA7CCL,KAAK,CAACM,SAAN,EA6CD;AAAA,SA5CdC,KA4Cc,GA5CN,CACP;AACCC,MAAAA,EAAE,EAAE,CADL;AAECC,MAAAA,KAAK,EAAE,sBAFR;AAGCC,MAAAA,UAAU,EAAE,KAHb;AAICC,MAAAA,OAAO,EAAE;AAJV,KADO,EAOP;AACCH,MAAAA,EAAE,EAAE,CADL;AAECC,MAAAA,KAAK,EAAE,uBAFR;AAGCC,MAAAA,UAAU,EAAE,KAHb;AAICC,MAAAA,OAAO,EAAE;AAJV,KAPO,CA4CM;;AAAA,SA7BdC,OA6Bc,GA7BHC,KAAD,IAAW;AACpB,UAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AAC1B,cAAMC,YAAY,GAAG,KAAKV,YAAL,CAAkBW,OAAlB,CAA0BC,KAA/C;AAEA,YAAIF,YAAY,CAACG,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AAE7B,YAAIhB,YAAY,GAAG,KAAKiB,KAAL,CAAWjB,YAAX,GAA0B,CAA7C;AACT,aAAKI,KAAL,CAAWc,IAAX,CAAgB;AACfb,UAAAA,EAAE,EAAEL,YADW;AAEfM,UAAAA,KAAK,EAAEM,YAFQ;AAGfL,UAAAA,UAAU,EAAE,KAHG;AAIfC,UAAAA,OAAO,EAAE;AAJM,SAAhB,EAN0B,CAa1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,aAAKN,YAAL,CAAkBW,OAAlB,CAA0BC,KAA1B,GAAkC,EAAlC;AACA;AACD,KAEa;;AACbnB,IAAAA,cAAc,CAAC,IAAD,EAAO;AACpBK,MAAAA,YAAY,EAAEJ,UADM;AAEpBK,MAAAA,MAAM,EAAEL,UAFY;AAGpBQ,MAAAA,KAAK,EAAER,UAHa;AAIpBa,MAAAA,OAAO,EAAEf;AAJW,KAAP,CAAd;AAMA;;AAvDc;;AA0DhB,MAAMyB,KAAK,GAAG,IAAIrB,SAAJ,EAAd;AAEA,eAAeqB,KAAf","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n\tidForNewTask = 3;\n\tfilter = \"all\";\n\tnewTaskInput = React.createRef();\n\ttasks = [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: \"First Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: \"Second Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t];\n\n\taddTask = (event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tconst newTaskTitle = this.newTaskInput.current.value;\n\n\t\t\tif (newTaskTitle.trim().length === 0) return;\n\n            let idForNewTask = this.state.idForNewTask + 1;\n\t\t\tthis.tasks.push({\n\t\t\t\tid: idForNewTask,\n\t\t\t\ttitle: newTaskTitle,\n\t\t\t\tisComplete: false,\n\t\t\t\tediting: false,\n\t\t\t});\n\n\t\t\t// let tasks = [...this.state.tasks];\n\t\t\t// let idForNewTask = this.state.idForNewTask + 1;\n\t\t\t// tasks.push({\n\t\t\t// \tid: idForNewTask,\n\t\t\t// \ttitle: newTaskTitle,\n\t\t\t// \tisComplete: false,\n\t\t\t// \tediting: false,\n\t\t\t// });\n\n\t\t\t// this.setState({ tasks, idForNewTask });\n\n\t\t\tthis.newTaskInput.current.value = \"\";\n\t\t}\n\t};\n\n\tconstructor() {\n\t\tmakeObservable(this, {\n\t\t\tidForNewTask: observable,\n\t\t\tfilter: observable,\n\t\t\ttasks: observable,\n\t\t\taddTask: action,\n\t\t});\n\t}\n}\n\nconst store = new TaskStore();\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}