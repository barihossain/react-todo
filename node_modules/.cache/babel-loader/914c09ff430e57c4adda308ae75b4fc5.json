{"ast":null,"code":"var _jsxFileName = \"/Users/barihossain/Sites/react-todo/src/components/App.js\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"../App.css\";\nimport React, { Component } from \"react\";\nimport TasksRemaining from \"./TasksRemaining\";\nimport TaskItem from \"./TaskItem\";\nimport TasksCheckAll from \"./TasksCheckAll\";\nimport TasksFilters from \"./TasksFilters\";\nimport TasksClearCompleted from \"./TasksClearCompleted\";\nimport { observer } from \"mobx-react\";\nimport TaskStore from \"../stores/TaskStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      idForNewTask: 3,\n      filter: \"all\",\n      tasks: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container py-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2 mb-4 bg-light rounded-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-fluid py-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"display-5 fw-bold text-center mb-5\",\n              children: \"ToDo List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"new-task w-100 p-2 mb-4 font-weight-light\",\n              placeholder: \"Enter new task here\",\n              ref: TaskStore.newTaskInput,\n              onKeyUp: TaskStore.addTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 8\n            }, this), TaskStore.tasksFiltered().length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-primary\",\n              role: \"alert\",\n              children: [\"No\", \" \", this.state.filter !== \"all\" ? this.state.filter : \"\", \" \", \"tasks found\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 9\n            }, this), TaskStore.tasksFiltered().map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n              task: task,\n              completeTask: TaskStore.completeTask,\n              deleteTask: TaskStore.deleteTask,\n              changeTaskEditing: TaskStore.changeTaskEditing,\n              doneEdit: TaskStore.doneEdit,\n              doneEditOnOtherKeys: TaskStore.doneEditOnOtherKeys\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 9\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"extra-container d-flex align-items-center justify-content-between mb-2 pt-3 border-top\",\n              children: [/*#__PURE__*/_jsxDEV(TasksCheckAll, {\n                length: this.state.tasks.length,\n                completeAllTasks: TaskStore.completeAllTasks,\n                checked: TaskStore.isAllCompleted()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(TasksRemaining, {\n                remaining: TaskStore.remainingCount()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"extra-container d-flex align-items-center justify-content-between mb-2 pt-3 border-top\",\n              children: [/*#__PURE__*/_jsxDEV(TasksFilters, {\n                filter: this.state.filter,\n                updateFilter: TaskStore.updateFilter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 9\n              }, this), TaskStore.completedCount() > 0 && /*#__PURE__*/_jsxDEV(TasksClearCompleted, {\n                clearCompleted: TaskStore.clearCompleted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }, this);\n  }\n  /*\n  //\"start\": \"react-scripts start\",\n     //\"build\": \"react-scripts build\",\n     //\"test\": \"react-scripts test\",\n  */\n  //newTaskInput = React.createRef();\n  // addTask = (event) => {\n  // \tif (event.key === \"Enter\") {\n  // \t\tconst newTaskTitle = this.newTaskInput.current.value;\n  // \t\tlet tasks = [...this.state.tasks];\n  // \t\tlet idForNewTask = this.state.idForNewTask + 1;\n  // \t\ttasks.push({\n  // \t\t\tid: idForNewTask,\n  // \t\t\ttitle: newTaskTitle,\n  // \t\t\tisComplete: false,\n  // \t\t\tediting: false,\n  // \t\t});\n  // \t\tthis.setState({ tasks, idForNewTask });\n  // \t\tthis.newTaskInput.current.value = \"\";\n  // \t}\n  // };\n  // deleteTask = (id) => {\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === id);\n  // \ttasks.splice(index, 1);\n  // \tthis.setState({ tasks });\n  // };\n  // completeTask = (task) => {\n  // \ttask.isComplete = !task.isComplete;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // changeTaskEditing = (task) => {\n  // \ttask.editing = !task.editing;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // doneEdit = (task, event) => {\n  // \tevent.persist();\n  // \ttask.editing = false;\n  // \tlet newTitle = event.target.value;\n  // \tif (newTitle.trim().length !== 0) task.title = newTitle;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // doneEditOnOtherKeys = (task, event) => {\n  // \tif (event.key === \"Enter\") {\n  // \t\tthis.doneEdit(task, event);\n  // \t} else if (event.key === \"Escape\") {\n  // \t\tthis.changeTaskEditing(task);\n  // \t}\n  // };\n  // remainingCount = () => {\n  // \treturn this.state.tasks.filter((task) => !task.isComplete).length;\n  // };\n  // isAllCompleted = () => {\n  // \treturn this.remainingCount() === 0;\n  // };\n  // completedCount = () => {\n  // \treturn this.state.tasks.filter((task) => task.isComplete).length;\n  // };\n  // clearCompleted = () => {\n  // \tlet tasks = [...this.state.tasks];\n  // \ttasks = tasks.filter((task) => !task.isComplete);\n  // \tthis.setState({ tasks });\n  // };\n  // updateFilter = (filter) => {\n  // \tthis.setState({ filter: filter });\n  // };\n  // tasksFiltered = () => {\n  // \tlet tasks = [...this.state.tasks];\n  // \tif (this.state.filter === \"all\") {\n  // \t\treturn tasks;\n  // \t} else if (this.state.filter === \"active\") {\n  // \t\treturn tasks.filter((task) => !task.isComplete);\n  // \t} else if (this.state.filter === \"completed\") {\n  // \t\treturn tasks.filter((task) => task.isComplete);\n  // \t}\n  // \treturn tasks;\n  // };\n  // completeAllTasks = (event) => {\n  // \tevent.persist();\n  // \tlet tasks = [...this.state.tasks];\n  // \ttasks.forEach((todo) => (todo.isComplete = event.target.checked));\n  // \tthis.setState({ tasks });\n  // };\n\n\n}\n\nexport default _c = observer(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/barihossain/Sites/react-todo/src/components/App.js"],"names":["React","Component","TasksRemaining","TaskItem","TasksCheckAll","TasksFilters","TasksClearCompleted","observer","TaskStore","App","state","idForNewTask","filter","tasks","render","newTaskInput","addTask","tasksFiltered","length","map","task","completeTask","deleteTask","changeTaskEditing","doneEdit","doneEditOnOtherKeys","id","completeAllTasks","isAllCompleted","remainingCount","updateFilter","completedCount","clearCompleted"],"mappings":"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","sourcesContent":["import \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"../App.css\";\nimport React, { Component } from \"react\";\nimport TasksRemaining from \"./TasksRemaining\";\nimport TaskItem from \"./TaskItem\";\nimport TasksCheckAll from \"./TasksCheckAll\";\nimport TasksFilters from \"./TasksFilters\";\nimport TasksClearCompleted from \"./TasksClearCompleted\";\nimport { observer } from \"mobx-react\";\nimport TaskStore from \"../stores/TaskStore\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<div className=\"container py-4\">\n\t\t\t\t\t<div className=\"p-2 mb-4 bg-light rounded-3\">\n\t\t\t\t\t\t<div className=\"container-fluid py-5\">\n\t\t\t\t\t\t\t<h1 className=\"display-5 fw-bold text-center mb-5\">\n\t\t\t\t\t\t\t\tToDo List\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"new-task w-100 p-2 mb-4 font-weight-light\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter new task here\"\n\t\t\t\t\t\t\t\tref={TaskStore.newTaskInput}\n\t\t\t\t\t\t\t\tonKeyUp={TaskStore.addTask}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{TaskStore.tasksFiltered().length === 0 && (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"alert alert-primary\"\n\t\t\t\t\t\t\t\t\trole=\"alert\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNo{\" \"}\n\t\t\t\t\t\t\t\t\t{this.state.filter !== \"all\"\n\t\t\t\t\t\t\t\t\t\t? this.state.filter\n\t\t\t\t\t\t\t\t\t\t: \"\"}{\" \"}\n\t\t\t\t\t\t\t\t\ttasks found\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{TaskStore.tasksFiltered().map((task) => (\n\t\t\t\t\t\t\t\t<TaskItem\n\t\t\t\t\t\t\t\t\tkey={task.id}\n\t\t\t\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\t\t\t\tcompleteTask={TaskStore.completeTask}\n\t\t\t\t\t\t\t\t\tdeleteTask={TaskStore.deleteTask}\n\t\t\t\t\t\t\t\t\tchangeTaskEditing={\n\t\t\t\t\t\t\t\t\t\tTaskStore.changeTaskEditing\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdoneEdit={TaskStore.doneEdit}\n\t\t\t\t\t\t\t\t\tdoneEditOnOtherKeys={\n\t\t\t\t\t\t\t\t\t\tTaskStore.doneEditOnOtherKeys\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t<div className=\"extra-container d-flex align-items-center justify-content-between mb-2 pt-3 border-top\">\n\t\t\t\t\t\t\t\t<TasksCheckAll\n\t\t\t\t\t\t\t\t\tlength={this.state.tasks.length}\n\t\t\t\t\t\t\t\t\tcompleteAllTasks={\n\t\t\t\t\t\t\t\t\t\tTaskStore.completeAllTasks\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tchecked={TaskStore.isAllCompleted()}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<TasksRemaining\n\t\t\t\t\t\t\t\t\tremaining={TaskStore.remainingCount()}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"extra-container d-flex align-items-center justify-content-between mb-2 pt-3 border-top\">\n\t\t\t\t\t\t\t\t<TasksFilters\n\t\t\t\t\t\t\t\t\tfilter={this.state.filter}\n\t\t\t\t\t\t\t\t\tupdateFilter={TaskStore.updateFilter}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t{TaskStore.completedCount() > 0 && (\n\t\t\t\t\t\t\t\t\t<TasksClearCompleted\n\t\t\t\t\t\t\t\t\t\tclearCompleted={\n\t\t\t\t\t\t\t\t\t\t\tTaskStore.clearCompleted\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t);\n\t}\n\n\t/*\n\t//\"start\": \"react-scripts start\",\n    //\"build\": \"react-scripts build\",\n    //\"test\": \"react-scripts test\",\n\t*/\n\n\tstate = {\n\t\tidForNewTask: 3,\n\t\tfilter: \"all\",\n\t\ttasks: [],\n\t};\n\n\t//newTaskInput = React.createRef();\n\t// addTask = (event) => {\n\t// \tif (event.key === \"Enter\") {\n\t// \t\tconst newTaskTitle = this.newTaskInput.current.value;\n\n\t// \t\tlet tasks = [...this.state.tasks];\n\t// \t\tlet idForNewTask = this.state.idForNewTask + 1;\n\t// \t\ttasks.push({\n\t// \t\t\tid: idForNewTask,\n\t// \t\t\ttitle: newTaskTitle,\n\t// \t\t\tisComplete: false,\n\t// \t\t\tediting: false,\n\t// \t\t});\n\n\t// \t\tthis.setState({ tasks, idForNewTask });\n\n\t// \t\tthis.newTaskInput.current.value = \"\";\n\t// \t}\n\t// };\n\n\t// deleteTask = (id) => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \tlet index = tasks.findIndex((t) => t.id === id);\n\n\t// \ttasks.splice(index, 1);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// completeTask = (task) => {\n\t// \ttask.isComplete = !task.isComplete;\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// changeTaskEditing = (task) => {\n\t// \ttask.editing = !task.editing;\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// doneEdit = (task, event) => {\n\t// \tevent.persist();\n\t// \ttask.editing = false;\n\t// \tlet newTitle = event.target.value;\n\n\t// \tif (newTitle.trim().length !== 0) task.title = newTitle;\n\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// doneEditOnOtherKeys = (task, event) => {\n\t// \tif (event.key === \"Enter\") {\n\t// \t\tthis.doneEdit(task, event);\n\t// \t} else if (event.key === \"Escape\") {\n\t// \t\tthis.changeTaskEditing(task);\n\t// \t}\n\t// };\n\n\t// remainingCount = () => {\n\t// \treturn this.state.tasks.filter((task) => !task.isComplete).length;\n\t// };\n\n\t// isAllCompleted = () => {\n\t// \treturn this.remainingCount() === 0;\n\t// };\n\n\t// completedCount = () => {\n\t// \treturn this.state.tasks.filter((task) => task.isComplete).length;\n\t// };\n\n\t// clearCompleted = () => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \ttasks = tasks.filter((task) => !task.isComplete);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// updateFilter = (filter) => {\n\t// \tthis.setState({ filter: filter });\n\t// };\n\n\t// tasksFiltered = () => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \tif (this.state.filter === \"all\") {\n\t// \t\treturn tasks;\n\t// \t} else if (this.state.filter === \"active\") {\n\t// \t\treturn tasks.filter((task) => !task.isComplete);\n\t// \t} else if (this.state.filter === \"completed\") {\n\t// \t\treturn tasks.filter((task) => task.isComplete);\n\t// \t}\n\n\t// \treturn tasks;\n\t// };\n\n\t// completeAllTasks = (event) => {\n\t// \tevent.persist();\n\n\t// \tlet tasks = [...this.state.tasks];\n\t// \ttasks.forEach((todo) => (todo.isComplete = event.target.checked));\n\n\t// \tthis.setState({ tasks });\n\t// };\n}\n\nexport default observer(App);\n"]},"metadata":{},"sourceType":"module"}