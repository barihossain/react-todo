{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n  get tasksFiltered() {\n    if (this.filter === \"all\") {\n      return this.tasks;\n    } else if (this.filter === \"active\") {\n      return this.tasks.filter(task => !task.isComplete);\n    } else if (this.filter === \"completed\") {\n      return this.tasks.filter(task => task.isComplete);\n    }\n\n    return this.tasks;\n  }\n\n  constructor() {\n    this.idForNewTask = 3;\n    this.filter = \"all\";\n    this.newTaskInput = /*#__PURE__*/React.createRef();\n    this.tasks = [{\n      id: 1,\n      title: \"First Task from MobX\",\n      isComplete: false,\n      editing: false\n    }, {\n      id: 2,\n      title: \"Second Task from MobX\",\n      isComplete: false,\n      editing: false\n    }];\n\n    this.addTask = event => {\n      if (event.key === \"Enter\") {\n        const newTaskTitle = this.newTaskInput.current.value;\n        if (newTaskTitle.trim().length === 0) return;\n        this.tasks.push({\n          id: this.idForNewTask,\n          title: newTaskTitle,\n          isComplete: false,\n          editing: false\n        });\n        this.idForNewTask++; // let tasks = [...this.state.tasks];\n        // let idForNewTask = this.state.idForNewTask + 1;\n        // tasks.push({\n        // \tid: idForNewTask,\n        // \ttitle: newTaskTitle,\n        // \tisComplete: false,\n        // \tediting: false,\n        // });\n        // this.setState({ tasks, idForNewTask });\n\n        this.newTaskInput.current.value = \"\";\n      }\n    };\n\n    this.deleteTask = id => {\n      let index = this.tasks.findIndex(t => t.id === id);\n      this.tasks.splice(index, 1);\n    };\n\n    this.completeTask = task => {\n      task.isComplete = !task.isComplete;\n      let index = this.tasks.findIndex(t => t.id === task.id);\n      this.tasks.splice(index, 1, task);\n    };\n\n    this.changeTaskEditing = task => {\n      task.editing = !task.editing;\n      let index = this.tasks.findIndex(t => t.id === task.id);\n      this.tasks.splice(index, 1, task);\n    };\n\n    this.doneEdit = (task, event) => {\n      event.persist();\n      task.editing = false;\n      let newTitle = event.target.value;\n      if (newTitle.trim().length !== 0) task.title = newTitle;\n      let index = this.tasks.findIndex(t => t.id === task.id);\n      this.tasks.splice(index, 1, task);\n    };\n\n    this.doneEditOnOtherKeys = (task, event) => {\n      if (event.key === \"Enter\") {\n        this.doneEdit(task, event);\n      } else if (event.key === \"Escape\") {\n        this.changeTaskEditing(task);\n      }\n    };\n\n    this.clearCompleted = () => {\n      this.tasks = this.tasks.filter(task => !task.isComplete);\n    };\n\n    this.updateFilter = filter => {\n      this.filter = filter;\n    };\n\n    this.completeAllTasks = event => {\n      //event.persist();\n      this.tasks.forEach(task => task.isComplete = event.target.checked);\n    };\n\n    makeObservable(this, {\n      idForNewTask: observable,\n      filter: observable,\n      tasks: observable,\n      addTask: action,\n      deleteTask: action,\n      completeTask: action,\n      changeTaskEditing: action,\n      doneEdit: action,\n      doneEditOnOtherKeys: action,\n      remainingCount: computed,\n      isAllCompleted: computed,\n      completedCount: computed,\n      clearCompleted: action,\n      updateFilter: action,\n      tasksFiltered: computed,\n      completeAllTasks: action\n    });\n  }\n\n}\n\nconst store = new TaskStore();\nexport default store;","map":{"version":3,"sources":["/Users/barihossain/Sites/react-todo/src/stores/TaskStore.js"],"names":["action","computed","makeObservable","observable","React","TaskStore","tasksFiltered","filter","tasks","task","isComplete","constructor","idForNewTask","newTaskInput","createRef","id","title","editing","addTask","event","key","newTaskTitle","current","value","trim","length","push","deleteTask","index","findIndex","t","splice","completeTask","changeTaskEditing","doneEdit","persist","newTitle","target","doneEditOnOtherKeys","clearCompleted","updateFilter","completeAllTasks","forEach","checked","remainingCount","isAllCompleted","completedCount","store"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n\tidForNewTask = 3;\n\tfilter = \"all\";\n\tnewTaskInput = React.createRef();\n\ttasks = [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: \"First Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: \"Second Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t];\n\n\taddTask = (event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tconst newTaskTitle = this.newTaskInput.current.value;\n\n\t\t\tif (newTaskTitle.trim().length === 0) return;\n\n\t\t\tthis.tasks.push({\n\t\t\t\tid: this.idForNewTask,\n\t\t\t\ttitle: newTaskTitle,\n\t\t\t\tisComplete: false,\n\t\t\t\tediting: false,\n\t\t\t});\n\n\t\t\tthis.idForNewTask++;\n\n\t\t\t// let tasks = [...this.state.tasks];\n\t\t\t// let idForNewTask = this.state.idForNewTask + 1;\n\t\t\t// tasks.push({\n\t\t\t// \tid: idForNewTask,\n\t\t\t// \ttitle: newTaskTitle,\n\t\t\t// \tisComplete: false,\n\t\t\t// \tediting: false,\n\t\t\t// });\n\n\t\t\t// this.setState({ tasks, idForNewTask });\n\n\t\t\tthis.newTaskInput.current.value = \"\";\n\t\t}\n\t};\n\n\tdeleteTask = (id) => {\n\t\tlet index = this.tasks.findIndex((t) => t.id === id);\n\n\t\tthis.tasks.splice(index, 1);\n\t};\n\n\tcompleteTask = (task) => {\n\t\ttask.isComplete = !task.isComplete;\n\t\tlet index = this.tasks.findIndex((t) => t.id === task.id);\n\n\t\tthis.tasks.splice(index, 1, task);\n\t};\n\n\tchangeTaskEditing = (task) => {\n\t\ttask.editing = !task.editing;\n\n\t\tlet index = this.tasks.findIndex((t) => t.id === task.id);\n\n\t\tthis.tasks.splice(index, 1, task);\n\t};\n\n\tdoneEdit = (task, event) => {\n\t\tevent.persist();\n\t\ttask.editing = false;\n\t\tlet newTitle = event.target.value;\n\n\t\tif (newTitle.trim().length !== 0) task.title = newTitle;\n\n\t\tlet index = this.tasks.findIndex((t) => t.id === task.id);\n\n\t\tthis.tasks.splice(index, 1, task);\n\t};\n\n\tdoneEditOnOtherKeys = (task, event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tthis.doneEdit(task, event);\n\t\t} else if (event.key === \"Escape\") {\n\t\t\tthis.changeTaskEditing(task);\n\t\t}\n\t};\n\n\t\n\n\tclearCompleted = () => {\n\t\tthis.tasks = this.tasks.filter((task) => !task.isComplete);\n\t};\n\n\tupdateFilter = (filter) => {\n\t\tthis.filter = filter;\n\t};\n\n\tget tasksFiltered() {\n\t\tif (this.filter === \"all\") {\n\t\t\treturn this.tasks;\n\t\t} else if (this.filter === \"active\") {\n\t\t\treturn this.tasks.filter((task) => !task.isComplete);\n\t\t} else if (this.filter === \"completed\") {\n\t\t\treturn this.tasks.filter((task) => task.isComplete);\n\t\t}\n\n\t\treturn this.tasks;\n\t}\n\n\tcompleteAllTasks = (event) => {\n\t\t//event.persist();\n\t\tthis.tasks.forEach((task) => (task.isComplete = event.target.checked));\n\t};\n\n\tconstructor() {\n\t\tmakeObservable(this, {\n\t\t\tidForNewTask: observable,\n\t\t\tfilter: observable,\n\t\t\ttasks: observable,\n\t\t\taddTask: action,\n\t\t\tdeleteTask: action,\n\t\t\tcompleteTask: action,\n\t\t\tchangeTaskEditing: action,\n\t\t\tdoneEdit: action,\n\t\t\tdoneEditOnOtherKeys: action,\n\t\t\tremainingCount: computed,\n\t\t\tisAllCompleted: computed,\n\t\t\tcompletedCount: computed,\n\t\t\tclearCompleted: action,\n\t\t\tupdateFilter: action,\n\t\t\ttasksFiltered: computed,\n\t\t\tcompleteAllTasks: action,\n\t\t});\n\t}\n}\n\nconst store = new TaskStore();\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}