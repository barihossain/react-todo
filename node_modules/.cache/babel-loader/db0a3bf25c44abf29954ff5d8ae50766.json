{"ast":null,"code":"var _jsxFileName = \"/Users/barihossain/Sites/react-todo/src/components/App.js\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"../App.css\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport TaskList from \"./TaskList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container py-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2 mb-4 bg-light rounded-3\",\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            component: \"TaskList\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/trash\",\n            component: \"TaskList\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this);\n  }\n  /*\n  //\"start\": \"react-scripts start\",\n     //\"build\": \"react-scripts build\",\n     //\"test\": \"react-scripts test\",\n  */\n  //newTaskInput = React.createRef();\n  // addTask = (event) => {\n  // \tif (event.key === \"Enter\") {\n  // \t\tconst newTaskTitle = this.newTaskInput.current.value;\n  // \t\tlet tasks = [...this.state.tasks];\n  // \t\tlet idForNewTask = this.state.idForNewTask + 1;\n  // \t\ttasks.push({\n  // \t\t\tid: idForNewTask,\n  // \t\t\ttitle: newTaskTitle,\n  // \t\t\tisComplete: false,\n  // \t\t\tediting: false,\n  // \t\t});\n  // \t\tthis.setState({ tasks, idForNewTask });\n  // \t\tthis.newTaskInput.current.value = \"\";\n  // \t}\n  // };\n  // deleteTask = (id) => {\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === id);\n  // \ttasks.splice(index, 1);\n  // \tthis.setState({ tasks });\n  // };\n  // completeTask = (task) => {\n  // \ttask.isComplete = !task.isComplete;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // changeTaskEditing = (task) => {\n  // \ttask.editing = !task.editing;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // doneEdit = (task, event) => {\n  // \tevent.persist();\n  // \ttask.editing = false;\n  // \tlet newTitle = event.target.value;\n  // \tif (newTitle.trim().length !== 0) task.title = newTitle;\n  // \tlet tasks = [...this.state.tasks];\n  // \tlet index = tasks.findIndex((t) => t.id === task.id);\n  // \ttasks.splice(index, 1, task);\n  // \tthis.setState({ tasks });\n  // };\n  // doneEditOnOtherKeys = (task, event) => {\n  // \tif (event.key === \"Enter\") {\n  // \t\tthis.doneEdit(task, event);\n  // \t} else if (event.key === \"Escape\") {\n  // \t\tthis.changeTaskEditing(task);\n  // \t}\n  // };\n  // remainingCount = () => {\n  // \treturn this.state.tasks.filter((task) => !task.isComplete).length;\n  // };\n  // isAllCompleted = () => {\n  // \treturn this.remainingCount() === 0;\n  // };\n  // completedCount = () => {\n  // \treturn this.state.tasks.filter((task) => task.isComplete).length;\n  // };\n  // clearCompleted = () => {\n  // \tlet tasks = [...this.state.tasks];\n  // \ttasks = tasks.filter((task) => !task.isComplete);\n  // \tthis.setState({ tasks });\n  // };\n  // updateFilter = (filter) => {\n  // \tthis.setState({ filter: filter });\n  // };\n  // tasksFiltered = () => {\n  // \tlet tasks = [...this.state.tasks];\n  // \tif (this.state.filter === \"all\") {\n  // \t\treturn tasks;\n  // \t} else if (this.state.filter === \"active\") {\n  // \t\treturn tasks.filter((task) => !task.isComplete);\n  // \t} else if (this.state.filter === \"completed\") {\n  // \t\treturn tasks.filter((task) => task.isComplete);\n  // \t}\n  // \treturn tasks;\n  // };\n  // completeAllTasks = (event) => {\n  // \tevent.persist();\n  // \tlet tasks = [...this.state.tasks];\n  // \ttasks.forEach((todo) => (todo.isComplete = event.target.checked));\n  // \tthis.setState({ tasks });\n  // };\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/barihossain/Sites/react-todo/src/components/App.js"],"names":["React","Component","Route","TaskList","App","render"],"mappings":";AAAA,OAAO,kCAAP;AACA,OAAO,2CAAP;AACA,OAAO,YAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC3BI,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACC;AAAK,UAAA,SAAS,EAAC,6BAAf;AAAA,kCACC,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,GAAZ;AAAgB,YAAA,SAAS,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,SAAS,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAUA;AAED;AACD;AACA;AACA;AACA;AAEC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AA1I2B;;AA6I5B,eAAeD,GAAf","sourcesContent":["import \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"../App.css\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport TaskList from \"./TaskList\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<div className=\"container py-4\">\n\t\t\t\t\t<div className=\"p-2 mb-4 bg-light rounded-3\">\n\t\t\t\t\t\t<Route path=\"/\" component=\"TaskList\" />\n\t\t\t\t\t\t<Route path=\"/trash\" component=\"TaskList\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t);\n\t}\n\n\t/*\n\t//\"start\": \"react-scripts start\",\n    //\"build\": \"react-scripts build\",\n    //\"test\": \"react-scripts test\",\n\t*/\n\n\t//newTaskInput = React.createRef();\n\t// addTask = (event) => {\n\t// \tif (event.key === \"Enter\") {\n\t// \t\tconst newTaskTitle = this.newTaskInput.current.value;\n\n\t// \t\tlet tasks = [...this.state.tasks];\n\t// \t\tlet idForNewTask = this.state.idForNewTask + 1;\n\t// \t\ttasks.push({\n\t// \t\t\tid: idForNewTask,\n\t// \t\t\ttitle: newTaskTitle,\n\t// \t\t\tisComplete: false,\n\t// \t\t\tediting: false,\n\t// \t\t});\n\n\t// \t\tthis.setState({ tasks, idForNewTask });\n\n\t// \t\tthis.newTaskInput.current.value = \"\";\n\t// \t}\n\t// };\n\n\t// deleteTask = (id) => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \tlet index = tasks.findIndex((t) => t.id === id);\n\n\t// \ttasks.splice(index, 1);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// completeTask = (task) => {\n\t// \ttask.isComplete = !task.isComplete;\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// changeTaskEditing = (task) => {\n\t// \ttask.editing = !task.editing;\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// doneEdit = (task, event) => {\n\t// \tevent.persist();\n\t// \ttask.editing = false;\n\t// \tlet newTitle = event.target.value;\n\n\t// \tif (newTitle.trim().length !== 0) task.title = newTitle;\n\n\t// \tlet tasks = [...this.state.tasks];\n\t// \tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t// \ttasks.splice(index, 1, task);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// doneEditOnOtherKeys = (task, event) => {\n\t// \tif (event.key === \"Enter\") {\n\t// \t\tthis.doneEdit(task, event);\n\t// \t} else if (event.key === \"Escape\") {\n\t// \t\tthis.changeTaskEditing(task);\n\t// \t}\n\t// };\n\n\t// remainingCount = () => {\n\t// \treturn this.state.tasks.filter((task) => !task.isComplete).length;\n\t// };\n\n\t// isAllCompleted = () => {\n\t// \treturn this.remainingCount() === 0;\n\t// };\n\n\t// completedCount = () => {\n\t// \treturn this.state.tasks.filter((task) => task.isComplete).length;\n\t// };\n\n\t// clearCompleted = () => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \ttasks = tasks.filter((task) => !task.isComplete);\n\n\t// \tthis.setState({ tasks });\n\t// };\n\n\t// updateFilter = (filter) => {\n\t// \tthis.setState({ filter: filter });\n\t// };\n\n\t// tasksFiltered = () => {\n\t// \tlet tasks = [...this.state.tasks];\n\n\t// \tif (this.state.filter === \"all\") {\n\t// \t\treturn tasks;\n\t// \t} else if (this.state.filter === \"active\") {\n\t// \t\treturn tasks.filter((task) => !task.isComplete);\n\t// \t} else if (this.state.filter === \"completed\") {\n\t// \t\treturn tasks.filter((task) => task.isComplete);\n\t// \t}\n\n\t// \treturn tasks;\n\t// };\n\n\t// completeAllTasks = (event) => {\n\t// \tevent.persist();\n\n\t// \tlet tasks = [...this.state.tasks];\n\t// \ttasks.forEach((todo) => (todo.isComplete = event.target.checked));\n\n\t// \tthis.setState({ tasks });\n\t// };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}