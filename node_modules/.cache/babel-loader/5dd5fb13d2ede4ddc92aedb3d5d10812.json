{"ast":null,"code":"import { action, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n  constructor() {\n    this.idForNewTask = 3;\n    this.filter = \"all\";\n    this.newTaskInput = /*#__PURE__*/React.createRef();\n    this.tasks = [{\n      id: 1,\n      title: \"First Task from MobX\",\n      isComplete: false,\n      editing: false\n    }, {\n      id: 2,\n      title: \"Second Task from MobX\",\n      isComplete: false,\n      editing: false\n    }];\n\n    this.addTask = event => {\n      if (event.key === \"Enter\") {\n        const newTaskTitle = this.newTaskInput.current.value;\n        if (newTaskTitle.trim().length === 0) return;\n        this.tasks.push({\n          id: this.idForNewTask,\n          title: newTaskTitle,\n          isComplete: false,\n          editing: false\n        });\n        this.idForNewTask++; // let tasks = [...this.state.tasks];\n        // let idForNewTask = this.state.idForNewTask + 1;\n        // tasks.push({\n        // \tid: idForNewTask,\n        // \ttitle: newTaskTitle,\n        // \tisComplete: false,\n        // \tediting: false,\n        // });\n        // this.setState({ tasks, idForNewTask });\n\n        this.newTaskInput.current.value = \"\";\n      }\n    };\n\n    this.deleteTask = id => {\n      let index = this.tasks.findIndex(t => t.id === id);\n      this.tasks.splice(index, 1);\n    };\n\n    this.completeTask = task => {\n      task.isComplete = !task.isComplete;\n      let index = this.tasks.findIndex(t => t.id === task.id);\n      this.tasks.splice(index, 1, task);\n    };\n\n    this.changeTaskEditing = task => {\n      task.editing = !task.editing;\n      let index = tasks.findIndex(t => t.id === task.id);\n      tasks.splice(index, 1, task);\n      this.setState({\n        tasks\n      });\n    };\n\n    makeObservable(this, {\n      idForNewTask: observable,\n      filter: observable,\n      tasks: observable,\n      addTask: action,\n      deleteTask: action,\n      completeTask: action,\n      changeTaskEditing: action\n    });\n  }\n\n}\n\nconst store = new TaskStore();\nexport default store;","map":{"version":3,"sources":["/Users/barihossain/Sites/react-todo/src/stores/TaskStore.js"],"names":["action","makeObservable","observable","React","TaskStore","constructor","idForNewTask","filter","newTaskInput","createRef","tasks","id","title","isComplete","editing","addTask","event","key","newTaskTitle","current","value","trim","length","push","deleteTask","index","findIndex","t","splice","completeTask","task","changeTaskEditing","setState","store"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\n\nclass TaskStore {\n\tidForNewTask = 3;\n\tfilter = \"all\";\n\tnewTaskInput = React.createRef();\n\ttasks = [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: \"First Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: \"Second Task from MobX\",\n\t\t\tisComplete: false,\n\t\t\tediting: false,\n\t\t},\n\t];\n\n\taddTask = (event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tconst newTaskTitle = this.newTaskInput.current.value;\n\n\t\t\tif (newTaskTitle.trim().length === 0) return;\n\n\t\t\tthis.tasks.push({\n\t\t\t\tid: this.idForNewTask,\n\t\t\t\ttitle: newTaskTitle,\n\t\t\t\tisComplete: false,\n\t\t\t\tediting: false,\n\t\t\t});\n\n\t\t\tthis.idForNewTask++;\n\n\t\t\t// let tasks = [...this.state.tasks];\n\t\t\t// let idForNewTask = this.state.idForNewTask + 1;\n\t\t\t// tasks.push({\n\t\t\t// \tid: idForNewTask,\n\t\t\t// \ttitle: newTaskTitle,\n\t\t\t// \tisComplete: false,\n\t\t\t// \tediting: false,\n\t\t\t// });\n\n\t\t\t// this.setState({ tasks, idForNewTask });\n\n\t\t\tthis.newTaskInput.current.value = \"\";\n\t\t}\n\t};\n\n\tdeleteTask = (id) => {\n\t\tlet index = this.tasks.findIndex((t) => t.id === id);\n\n\t\tthis.tasks.splice(index, 1);\n\t};\n\n\tcompleteTask = (task) => {\n\t\ttask.isComplete = !task.isComplete;\n\t\tlet index = this.tasks.findIndex((t) => t.id === task.id);\n\n\t\tthis.tasks.splice(index, 1, task);\n\t};\n\n\tchangeTaskEditing = (task) => {\n\t\ttask.editing = !task.editing;\n\t\t\n\t\tlet index = tasks.findIndex((t) => t.id === task.id);\n\n\t\ttasks.splice(index, 1, task);\n\n\t\tthis.setState({ tasks });\n\t};\n\n\tconstructor() {\n\t\tmakeObservable(this, {\n\t\t\tidForNewTask: observable,\n\t\t\tfilter: observable,\n\t\t\ttasks: observable,\n\t\t\taddTask: action,\n\t\t\tdeleteTask: action,\n\t\t\tcompleteTask: action,\n\t\t\tchangeTaskEditing: action,\n\t\t});\n\t}\n}\n\nconst store = new TaskStore();\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}